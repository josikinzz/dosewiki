import { ChangeEvent } from 'react';
import { Timer } from 'lucide-react';
import { SectionCard } from '../common/SectionCard';
import { IconBadge } from '../common/IconBadge';
import { RouteInfo, RouteKey } from '../../types/content';

interface DosageDurationCardProps {
  route: RouteKey;
  onRouteChange: (route: RouteKey) => void;
  routes: Record<RouteKey, RouteInfo>;
  note: string;
}

const routeLabels: Record<RouteKey, string> = {
  oral: 'Oral',
  sublingual: 'Sublingual',
  rectal: 'Rectal',
};

export function DosageDurationCard({ route, onRouteChange, routes, note }: DosageDurationCardProps) {
  const handleRouteChange = (event: ChangeEvent<HTMLSelectElement>) => {
    onRouteChange(event.target.value as RouteKey);
  };

  return (
    <SectionCard
      delay={0.05}
      className="border-fuchsia-500/30 bg-gradient-to-br from-fuchsia-500/10 to-violet-500/10 shadow-[0_10px_30px_-12px_rgba(168,85,247,0.35)] hover:shadow-[0_18px_50px_-12px_rgba(168,85,247,0.45)]"
    >
      <div className="flex items-center justify-between">
        <h2 className="flex items-center gap-3 text-xl font-semibold">
          <IconBadge icon={Timer} label="Dosage and duration" />
          Dosage & Duration
        </h2>
        <div className="relative">
          <label htmlFor="roa" className="sr-only">
            Route of administration
          </label>
          <select
            id="roa"
            value={route}
            onChange={handleRouteChange}
            className="appearance-none rounded-lg border border-white/20 bg-white/10 px-3 py-2 pr-8 text-sm text-white focus:border-fuchsia-400/40 focus:outline-none focus:ring-2 focus:ring-fuchsia-400/40"
          >
            {(Object.keys(routes) as RouteKey[]).map((key) => (
              <option key={key} value={key} className="bg-[#130e2b]">
                {routeLabels[key]}
              </option>
            ))}
          </select>
          <svg
            aria-hidden="true"
            className="pointer-events-none absolute right-2 top-1/2 h-4 w-4 -translate-y-1/2 opacity-70"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path d="M5.23 7.21a.75.75 0 0 1 1.06.02L10 10.94l3.71-3.71a.75.75 0 0 1 1.06 1.06l-4.24 4.24a.75.75 0 0 1-1.06 0L5.21 8.29a.75.75 0 0 1 .02-1.08z" />
          </svg>
        </div>
      </div>
      <p className="mt-2 text-xs text-white/70">{note}</p>
      <div className="mt-5 grid grid-cols-1 gap-6 md:grid-cols-2">
        <div>
          <h3 className="mb-3 text-sm font-semibold opacity-90">Dosage ({routeLabels[route]})</h3>
          <div className="space-y-2">
            {routes[route].dosage.map((entry) => (
              <div
                key={entry.label}
                className="flex items-center justify-between rounded-xl bg-white/5 px-4 py-2.5 text-sm text-white/85 ring-1 ring-white/10 transition hover:bg-white/10"
              >
                <span className="text-white/80">{entry.label}</span>
                <span className="font-semibold tracking-tight">{entry.value}</span>
              </div>
            ))}
          </div>
        </div>
        <div>
          <h3 className="mb-3 text-sm font-semibold opacity-90">Duration ({routeLabels[route]})</h3>
          <div className="space-y-2">
            {routes[route].duration.map((entry) => (
              <div
                key={entry.label}
                className="flex items-center justify-between rounded-xl bg-white/5 px-4 py-2.5 text-sm text-white/85 ring-1 ring-white/10 transition hover:bg-white/10"
              >
                <span className="text-white/80">{entry.label}</span>
                <span className="font-semibold tracking-tight">{entry.value}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </SectionCard>
  );
}

