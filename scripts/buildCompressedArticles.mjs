import fs from "fs";
import path from "path";

const keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

function compressToBase64(input) {
  if (input == null) {
    return "";
  }

  const res = _compress(input, 6, (a) => keyStrBase64.charAt(a));
  switch (res.length % 4) {
    default:
    case 0:
      return res;
    case 1:
      return `${res}===`;
    case 2:
      return `${res}==`;
    case 3:
      return `${res}=`;
  }
}

function _compress(uncompressed, bitsPerChar, getCharFromInt) {
  if (uncompressed == null) {
    return "";
  }

  const dictionary = Object.create(null);
  const dictionaryToCreate = Object.create(null);
  let c = "";
  let wc = "";
  let w = "";
  let enlargeIn = 2;
  let dictSize = 3;
  let numBits = 2;
  const data = [];
  let dataVal = 0;
  let dataPosition = 0;

  const writeBit = (bit) => {
    dataVal = (dataVal << 1) | bit;
    if (dataPosition === bitsPerChar - 1) {
      dataPosition = 0;
      data.push(getCharFromInt(dataVal));
      dataVal = 0;
    } else {
      dataPosition += 1;
    }
  };

  const writeBits = (count, value) => {
    for (let i = 0; i < count; i += 1) {
      writeBit(value & 1);
      value >>= 1;
    }
  };

  for (let index = 0; index < uncompressed.length; index += 1) {
    c = uncompressed.charAt(index);
    if (dictionary[c] === undefined) {
      dictionary[c] = dictSize++;
      dictionaryToCreate[c] = true;
    }
    wc = w + c;
    if (dictionary[wc] !== undefined) {
      w = wc;
    } else {
      if (dictionaryToCreate[w]) {
        const value = w.charCodeAt(0);
        if (value < 256) {
          writeBits(numBits, 0);
          writeBits(8, value);
        } else {
          writeBits(numBits, 1);
          writeBits(16, value);
        }
        enlargeIn -= 1;
        if (enlargeIn === 0) {
          enlargeIn = 1 << numBits;
          numBits += 1;
        }
        delete dictionaryToCreate[w];
      } else {
        writeBits(numBits, dictionary[w]);
      }
      enlargeIn -= 1;
      if (enlargeIn === 0) {
        enlargeIn = 1 << numBits;
        numBits += 1;
      }
      dictionary[wc] = dictSize++;
      w = String(c);
    }
  }

  if (w !== "") {
    if (dictionaryToCreate[w]) {
      const value = w.charCodeAt(0);
      if (value < 256) {
        writeBits(numBits, 0);
        writeBits(8, value);
      } else {
        writeBits(numBits, 1);
        writeBits(16, value);
      }
      enlargeIn -= 1;
      if (enlargeIn === 0) {
        enlargeIn = 1 << numBits;
        numBits += 1;
      }
      delete dictionaryToCreate[w];
    } else {
      writeBits(numBits, dictionary[w]);
    }
    enlargeIn -= 1;
    if (enlargeIn === 0) {
      enlargeIn = 1 << numBits;
      numBits += 1;
    }
  }

  writeBits(numBits, 2);

  while (true) {
    dataVal <<= 1;
    if (dataPosition === bitsPerChar - 1) {
      data.push(getCharFromInt(dataVal));
      break;
    }
    dataPosition += 1;
  }

  return data.join("");
}

const articlesPath = path.resolve("src/data/articles.json");
const outputPath = path.resolve("src/data/articles.compressed.ts");

try {
  if (!fs.existsSync(articlesPath)) {
    console.error(`Error: Input file not found: ${articlesPath}`);
    process.exit(1);
  }

  const input = fs.readFileSync(articlesPath, "utf8");

  // Validate JSON
  try {
    JSON.parse(input);
  } catch (parseError) {
    console.error(`Error: Malformed JSON in file: ${articlesPath}. Details: ${parseError.message}`);
    process.exit(1);
  }

  const compressed = compressToBase64(input);

  const moduleSource = `/**
 * Auto-generated by scripts/buildCompressedArticles.mjs
 * Represents LZ-String base64 data for articles.json
 */
export const articlesCompressedBase64 = ${JSON.stringify(compressed)};
export const articlesCompressedByteLength = ${Buffer.from(compressed, 'base64').length};
export const articlesSourceCharacters = ${input.length};
`;

  fs.writeFileSync(outputPath, moduleSource, "utf8");
  console.log(`Successfully generated ${outputPath}`);
} catch (error) {
  if (error.code === 'ENOENT') {
    console.error(`Error: File not found during operation: ${error.path || 'unknown path'}`);
  } else {
    console.error(`Error during file operations: ${error.message}`);
  }
  process.exit(1);
}
